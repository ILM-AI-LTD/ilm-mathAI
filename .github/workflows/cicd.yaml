name: Python CI/CD - ILM-MATH-AI

on:
  push:
    branches:
      - main-1   

env:
  AWS_REGION: eu-west-2
  ECR_REPO: ilm-math-ai
  EB_APP_NAME: ILM-MATH-AI
  EB_ENV_NAME: ILM-MATH-AI-ENV
  S3_BUCKET: elasticbeanstalk-eu-west-2-013419929011
  S3_PREFIX: ilm-math-ai-prod/deployments

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run tests with timeout
      run: |
        timeout 120s pytest || echo "Tests timed out or failed, proceeding anyway."

    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::013419929011:role/GitHubActions-ElasticBeanstalk-OIDC
        aws-region: ${{ env.AWS_REGION }}

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push Docker image
      run: |
        TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
        echo "IMAGE_TAG=$TIMESTAMP" >> $GITHUB_ENV
        docker build -t $ECR_REPO:$TIMESTAMP .
        docker tag $ECR_REPO:$TIMESTAMP ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:$TIMESTAMP
        docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:$TIMESTAMP

    - name: Generate Dockerrun.aws.json
      run: |
        echo "ARTIFACT_KEY=$S3_PREFIX/Dockerrun-${IMAGE_TAG}.json" >> $GITHUB_ENV
        cat > Dockerrun.aws.json <<EOF
        {
          "AWSEBDockerrunVersion": "1",
          "Image": {
            "Name": "${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:$IMAGE_TAG",
            "Update": "true"
          },
          "Ports": [
            {
              "ContainerPort": 5000
            }
          ],
          "Logging": "/var/log/nginx"
        }
        EOF

    - name: Upload Dockerrun.aws.json to S3
      run: |
        aws s3 cp Dockerrun.aws.json s3://$S3_BUCKET/$ARTIFACT_KEY

    - name: Deploy to Elastic Beanstalk
      run: |
        aws elasticbeanstalk create-application-version \
          --application-name $EB_APP_NAME \
          --version-label "ver-${IMAGE_TAG}" \
          --source-bundle S3Bucket=$S3_BUCKET,S3Key=$ARTIFACT_KEY

        aws elasticbeanstalk update-environment \
          --environment-name $EB_ENV_NAME \
          --version-label "ver-${IMAGE_TAG}"

    - name: Notify Slack via Script
      if: always()
      continue-on-error: true
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        EB_APP_NAME: ${{ env.EB_APP_NAME }}
        EB_ENV_NAME: ${{ env.EB_ENV_NAME }}
      run: |
        chmod +x scripts/notify-slack.sh
        ./scripts/notify-slack.sh "${{ job.status }}"
